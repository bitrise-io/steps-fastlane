title: "fastlane"
summary: |-
  Runs your fastlane lane on [bitrise.io](https://www.bitrise.io).
description: |-
  fastlane is an open-source app automation tool for iOS, Android and for most cross-platform frameworks, for example, React Native, Xamarin and Flutter.
  **fastlane** Step helps you integrate your lane to your Bitrise Workflow and runs your lane based on the fastlane actions with minimal configuration.
  If your Apple Developer Portal account is connected to Bitrise, the `FASTLANE_SESSION` Environment Variable will pass on the session data to fastlane.
  
  ### Configuring the Step
  1. Add the **fastlane** Step to your Workflow after the **Git Clone Repository** Step or any other dependency Step.
  1. Based on your project's fastlane setup, you can add your project's default lane or a custom lane in the **fastlane lane** input.
  2. If your fastlane directory is not available in your repository's root, then you can add the parent directory of fastlane directory in the **Working directory** input.
  3. If your project doesn't contain a fastlane gem in your project's Gemfile, you can use the **Should update fastlane gem before run** input.
  Set this input to `true` so that the Step can install the latest fastlane version to your project.
  If a gem lockfile (Gemfile.lock or gems.locked) includes the fastlane gem in the working directory, that specific fastlane version will be installed.
  4. Select `yes` in the **Enable verbose logging** input if you wish to run your build in debug mode and print out error additional debug logs.
  5. Select `yes` in the **Enable collecting files to be included in the build cache** to cache pods, Carthage and Android dependencies.

  ### Troubleshooting
  If you run your lane on Bitrise and your build fails on the **fastlane** Step, the logs won't reveal too much about the error since it's most likely related to the fastlane file's configuration.
  We recommend you swap your fastlane actions for Bitrise Steps which will bring out the problem.

  ### Useful links
  - [About fastlane](https://docs.fastlane.tools)
  - [Connecting your Apple Developer Account to Bitrise](https://devcenter.bitrise.io/getting-started/configuring-bitrise-steps-that-require-apple-developer-account-data/)
  - [Running fastlane on Bitrise](https://devcenter.bitrise.io/tutorials/fastlane/fastlane-index/)

  ### Related Steps
  - [Deploy to iTunes Connect/Deliver](https://www.bitrise.io/integrations/steps/deploy-to-itunesconnect-deliver)
  - [iOS Auto Provision](https://www.bitrise.io/integrations/steps/ios-auto-provision)
  - [Fastlane Match](https://www.bitrise.io/integrations/steps/fastlane-match)
website: https://github.com/bitrise-io/steps-fastlane
source_code_url: https://github.com/bitrise-io/steps-fastlane
support_url: https://github.com/bitrise-io/steps-fastlane/issues
type_tags:
  - utility
toolkit:
  go:
    package_name: github.com/bitrise-io/steps-fastlane
inputs:
  - lane:
    opts:
      title: "fastlane lane"
      description: |
        fastlane lane to run
        $ fastlane [lane]
      is_required: true
  - work_dir: $BITRISE_SOURCE_DIR
    opts:
      title: "Working directory"
      description: |-
        Use this option if the fastlane directory is not in your repository's root.

        Working directory should be the parent directory of your Fastfile's directory.

        For example:

        * If the Fastfile path is `./here/is/my/fastlane/Fastfile`
        * Then the Fastfile's directory is `./here/is/my/fastlane`
        * So the Working Directory should be `./here/is/my`
  - connection: "automatic"
    opts:
      title: Bitrise Apple Developer Connection
      summary: By default any enabled Bitrise Apple Developer Connection is used, inputs for Apple Service authentication are used as a fallback only.
      description: |-
        By default any enabled Bitrise Apple Developer Connection is used, inputs for Apple Service authentication are used as a fallback only.

        You can choose which type of Bitrise Apple Developer Connection to use, or use Step inputs for configuring authentication:
        - `automatic`: Use Apple Developer Connection if found, Step inputs are used as a fallback. Both cases API key (App Store Connect API) authentication has priority over Apple ID (legacy), if set.
        - `api_key`: Use Apple Developer Connection. Only API key (App Store Connect API) authentication is used. Authentication related Step inputs are ignored.
        - `apple_id`: Use Apple Developer Connection. Only Apple ID (legacy) authentication is used. Other authentication related Step inputs are ignored.
        - `off`: Do not use Apple Developer Connection. Only authentication related Step inputs are considered.
      is_required: true
      value_options:
      - "automatic"
      - "api_key"
      - "apple_id"
      - "off"
  - api_key_path: ""
    opts:
      title: "API Key: URL"
      summary: Path to local or remote file
      description: |-
        Specify the path in an URL format where your API key is stored.
        For example: `https://URL/TO/AuthKey_something.p8` or `file:///PATH/TO/AuthKey_something.p8`
        You can upload your key on the **Generic File Storage** tab in the Workflow Editor and set the environment variable for the file here.
        For example: `$BITRISEIO_MYKEY_URL`
        **NOTE:** Only available from XCode 11.0 and above.
      is_sensitive: true
  - api_issuer: ""
    opts:
      title: "API Key: Issuer ID"
      description: |-
        Issuer ID. Required if API Key URL (api_key_path) is specified.
        **NOTE:** Only available from XCode 11.0 and above.
  - itunescon_user: ""
    opts:
      title: "Apple ID (legacy): Apple ID"
      description: Login Apple ID for iTunes Connect.
      is_required: false
      is_sensitive: true
  - password: ""
    opts:
      title: "Apple ID (legacy): Password"
      description: Password for the specified Apple ID.
      is_required: false
      is_sensitive: true
  - app_password: ""
    opts:
      title: "Apple ID (legacy): Application-specific password (Required if using legacy Bitrise Apple Developer Connection)"
      description: |-
        An application-specific password for the Apple ID.
        **NOTE:** Application-specific passwords can be created on the
        [AppleID Website](https://appleid.apple.com). It can be used to
        bypass two-factor authentication.
      is_required: false
      is_sensitive: true
  - team_id: ""
    opts:
      title: "Apple ID (legacy): Team ID"
      description: |-
        The app's *Team ID* on iTunes Connect.
        **NOTE:** This field or the `Team name` is required when using an iTunes Connect account
        that is linked to multiple publishing teams.
  - team_name: ""
    opts:
      title: "Apple ID (legacy): Team name"
      description: |-
        The app's *Team Name* on iTunes Connect.
        **NOTE:** This field or the `Team ID` is required when using an iTunes Connect account
        that is linked to multiple publishing teams.
  - update_fastlane: "true"
    opts:
      title: "Should update fastlane gem before run?"
      description: |-
        Should update fastlane gem before run?
        *This option will be skipped if you have a `Gemfile` in the `work_dir` directory.*
      value_options:
      - "true"
      - "false"
  - verbose_log: "no"
    opts:
      title: "Enable verbose logging?"
      description: Enable verbose logging?
      is_required: true
      value_options:
      - "yes"
      - "no"
  - enable_cache: "yes"
    opts:
      title: "Enable collecting files to be included in the build cache"
      description: |-
        If enabled the step will add the following cache items (if they exist):  
        - Pods -> Podfile.lock
        - Carthage -> Cartfile.resolved
        - Android dependencies
      value_options:
      - "yes"
      - "no"
      is_required: true
